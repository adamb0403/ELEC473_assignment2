// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2024 16:07:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rx_parity_check
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rx_parity_check_vlg_sample_tst(
	parity_in,
	sampler_tx
);
input [9:0] parity_in;
output sampler_tx;

reg sample;
time current_time;
always @(parity_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rx_parity_check_vlg_check_tst (
	framing_out,
	p_check_out,
	parity_out,
	sampler_rx
);
input  framing_out;
input  p_check_out;
input [6:0] parity_out;
input sampler_rx;

reg  framing_out_expected;
reg  p_check_out_expected;
reg [6:0] parity_out_expected;

reg  framing_out_prev;
reg  p_check_out_prev;
reg [6:0] parity_out_prev;

reg  framing_out_expected_prev;
reg  p_check_out_expected_prev;
reg [6:0] parity_out_expected_prev;

reg  last_framing_out_exp;
reg  last_p_check_out_exp;
reg [6:0] last_parity_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	framing_out_prev = framing_out;
	p_check_out_prev = p_check_out;
	parity_out_prev = parity_out;
end

// update expected /o prevs

always @(trigger)
begin
	framing_out_expected_prev = framing_out_expected;
	p_check_out_expected_prev = p_check_out_expected;
	parity_out_expected_prev = parity_out_expected;
end



// expected framing_out
initial
begin
	framing_out_expected = 1'bX;
end 

// expected p_check_out
initial
begin
	p_check_out_expected = 1'bX;
end 
// expected parity_out[ 6 ]
initial
begin
	parity_out_expected[6] = 1'bX;
end 
// expected parity_out[ 5 ]
initial
begin
	parity_out_expected[5] = 1'bX;
end 
// expected parity_out[ 4 ]
initial
begin
	parity_out_expected[4] = 1'bX;
end 
// expected parity_out[ 3 ]
initial
begin
	parity_out_expected[3] = 1'bX;
end 
// expected parity_out[ 2 ]
initial
begin
	parity_out_expected[2] = 1'bX;
end 
// expected parity_out[ 1 ]
initial
begin
	parity_out_expected[1] = 1'bX;
end 
// expected parity_out[ 0 ]
initial
begin
	parity_out_expected[0] = 1'bX;
end 
// generate trigger
always @(framing_out_expected or framing_out or p_check_out_expected or p_check_out or parity_out_expected or parity_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected framing_out = %b | expected p_check_out = %b | expected parity_out = %b | ",framing_out_expected_prev,p_check_out_expected_prev,parity_out_expected_prev);
	$display("| real framing_out = %b | real p_check_out = %b | real parity_out = %b | ",framing_out_prev,p_check_out_prev,parity_out_prev);
`endif
	if (
		( framing_out_expected_prev !== 1'bx ) && ( framing_out_prev !== framing_out_expected_prev )
		&& ((framing_out_expected_prev !== last_framing_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port framing_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", framing_out_expected_prev);
		$display ("     Real value = %b", framing_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_framing_out_exp = framing_out_expected_prev;
	end
	if (
		( p_check_out_expected_prev !== 1'bx ) && ( p_check_out_prev !== p_check_out_expected_prev )
		&& ((p_check_out_expected_prev !== last_p_check_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_check_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_check_out_expected_prev);
		$display ("     Real value = %b", p_check_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p_check_out_exp = p_check_out_expected_prev;
	end
	if (
		( parity_out_expected_prev[0] !== 1'bx ) && ( parity_out_prev[0] !== parity_out_expected_prev[0] )
		&& ((parity_out_expected_prev[0] !== last_parity_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_out_expected_prev);
		$display ("     Real value = %b", parity_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_out_exp[0] = parity_out_expected_prev[0];
	end
	if (
		( parity_out_expected_prev[1] !== 1'bx ) && ( parity_out_prev[1] !== parity_out_expected_prev[1] )
		&& ((parity_out_expected_prev[1] !== last_parity_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_out_expected_prev);
		$display ("     Real value = %b", parity_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_out_exp[1] = parity_out_expected_prev[1];
	end
	if (
		( parity_out_expected_prev[2] !== 1'bx ) && ( parity_out_prev[2] !== parity_out_expected_prev[2] )
		&& ((parity_out_expected_prev[2] !== last_parity_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_out_expected_prev);
		$display ("     Real value = %b", parity_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_out_exp[2] = parity_out_expected_prev[2];
	end
	if (
		( parity_out_expected_prev[3] !== 1'bx ) && ( parity_out_prev[3] !== parity_out_expected_prev[3] )
		&& ((parity_out_expected_prev[3] !== last_parity_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_out_expected_prev);
		$display ("     Real value = %b", parity_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_out_exp[3] = parity_out_expected_prev[3];
	end
	if (
		( parity_out_expected_prev[4] !== 1'bx ) && ( parity_out_prev[4] !== parity_out_expected_prev[4] )
		&& ((parity_out_expected_prev[4] !== last_parity_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_out_expected_prev);
		$display ("     Real value = %b", parity_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_out_exp[4] = parity_out_expected_prev[4];
	end
	if (
		( parity_out_expected_prev[5] !== 1'bx ) && ( parity_out_prev[5] !== parity_out_expected_prev[5] )
		&& ((parity_out_expected_prev[5] !== last_parity_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_out_expected_prev);
		$display ("     Real value = %b", parity_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_out_exp[5] = parity_out_expected_prev[5];
	end
	if (
		( parity_out_expected_prev[6] !== 1'bx ) && ( parity_out_prev[6] !== parity_out_expected_prev[6] )
		&& ((parity_out_expected_prev[6] !== last_parity_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_out_expected_prev);
		$display ("     Real value = %b", parity_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_parity_out_exp[6] = parity_out_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rx_parity_check_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] parity_in;
// wires                                               
wire framing_out;
wire p_check_out;
wire [6:0] parity_out;

wire sampler;                             

// assign statements (if any)                          
rx_parity_check i1 (
// port map - connection between master ports and signals/registers   
	.framing_out(framing_out),
	.p_check_out(p_check_out),
	.parity_in(parity_in),
	.parity_out(parity_out)
);
// parity_in[ 9 ]
initial
begin
	parity_in[9] = 1'b1;
	parity_in[9] = #160000 1'b0;
	parity_in[9] = #160000 1'b1;
end 
// parity_in[ 8 ]
initial
begin
	parity_in[8] = 1'b1;
end 
// parity_in[ 7 ]
initial
begin
	parity_in[7] = 1'b0;
end 
// parity_in[ 6 ]
initial
begin
	parity_in[6] = 1'b1;
end 
// parity_in[ 5 ]
initial
begin
	parity_in[5] = 1'b1;
end 
// parity_in[ 4 ]
initial
begin
	parity_in[4] = 1'b1;
end 
// parity_in[ 3 ]
initial
begin
	parity_in[3] = 1'b1;
	parity_in[3] = #320000 1'b0;
end 
// parity_in[ 2 ]
initial
begin
	parity_in[2] = 1'b0;
end 
// parity_in[ 1 ]
initial
begin
	parity_in[1] = 1'b0;
end 
// parity_in[ 0 ]
initial
begin
	parity_in[0] = 1'b0;
end 

rx_parity_check_vlg_sample_tst tb_sample (
	.parity_in(parity_in),
	.sampler_tx(sampler)
);

rx_parity_check_vlg_check_tst tb_out(
	.framing_out(framing_out),
	.p_check_out(p_check_out),
	.parity_out(parity_out),
	.sampler_rx(sampler)
);
endmodule

