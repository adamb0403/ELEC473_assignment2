// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/07/2024 11:23:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rx_uart
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rx_uart_vlg_sample_tst(
	CLOCK_50,
	KEY,
	SW,
	UART_RXD,
	sampler_tx
);
input  CLOCK_50;
input [0:0] KEY;
input [0:0] SW;
input  UART_RXD;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or KEY or SW or UART_RXD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rx_uart_vlg_check_tst (
	HEX0,
	HEX1,
	LEDG,
	LEDR,
	ctrl_load_counter,
	ctrl_state,
	parity_7sd,
	sr_parity,
	sampler_rx
);
input [6:0] HEX0;
input [6:0] HEX1;
input [6:6] LEDG;
input [2:2] LEDR;
input  ctrl_load_counter;
input  ctrl_state;
input [6:0] parity_7sd;
input [10:0] sr_parity;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:6] LEDG_expected;
reg [2:2] LEDR_expected;
reg  ctrl_load_counter_expected;
reg  ctrl_state_expected;
reg [6:0] parity_7sd_expected;
reg [10:0] sr_parity_expected;

reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:6] LEDG_prev;
reg [2:2] LEDR_prev;
reg  ctrl_load_counter_prev;
reg  ctrl_state_prev;
reg [6:0] parity_7sd_prev;
reg [10:0] sr_parity_prev;

reg [6:0] HEX0_expected_prev;
reg [6:0] HEX1_expected_prev;
reg [6:6] LEDG_expected_prev;
reg [2:2] LEDR_expected_prev;
reg  ctrl_load_counter_expected_prev;
reg  ctrl_state_expected_prev;
reg [6:0] parity_7sd_expected_prev;
reg [10:0] sr_parity_expected_prev;

reg [6:0] last_HEX0_exp;
reg [6:0] last_HEX1_exp;
reg [6:6] last_LEDG_exp;
reg [2:2] last_LEDR_exp;
reg  last_ctrl_load_counter_exp;
reg  last_ctrl_state_exp;
reg [6:0] last_parity_7sd_exp;
reg [10:0] last_sr_parity_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	LEDG_prev = LEDG;
	LEDR_prev = LEDR;
	ctrl_load_counter_prev = ctrl_load_counter;
	ctrl_state_prev = ctrl_state;
	parity_7sd_prev = parity_7sd;
	sr_parity_prev = sr_parity;
end

// update expected /o prevs

always @(trigger)
begin
	HEX0_expected_prev = HEX0_expected;
	HEX1_expected_prev = HEX1_expected;
	LEDG_expected_prev = LEDG_expected;
	LEDR_expected_prev = LEDR_expected;
	ctrl_load_counter_expected_prev = ctrl_load_counter_expected;
	ctrl_state_expected_prev = ctrl_state_expected;
	parity_7sd_expected_prev = parity_7sd_expected;
	sr_parity_expected_prev = sr_parity_expected;
end


// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
	HEX0_expected[6] = #999000 1'b0;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
	HEX0_expected[5] = #999000 1'b0;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
	HEX0_expected[4] = #999000 1'b0;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
	HEX0_expected[3] = #999000 1'b0;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
	HEX0_expected[2] = #999000 1'b0;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
	HEX0_expected[1] = #999000 1'b0;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
	HEX0_expected[0] = #999000 1'b0;
end 
// expected HEX1[ 6 ]
initial
begin
	HEX1_expected[6] = 1'bX;
	HEX1_expected[6] = #999000 1'b0;
end 
// expected HEX1[ 5 ]
initial
begin
	HEX1_expected[5] = 1'bX;
	HEX1_expected[5] = #999000 1'b0;
end 
// expected HEX1[ 4 ]
initial
begin
	HEX1_expected[4] = 1'bX;
	HEX1_expected[4] = #999000 1'b0;
end 
// expected HEX1[ 3 ]
initial
begin
	HEX1_expected[3] = 1'bX;
	HEX1_expected[3] = #999000 1'b0;
end 
// expected HEX1[ 2 ]
initial
begin
	HEX1_expected[2] = 1'bX;
	HEX1_expected[2] = #999000 1'b0;
end 
// expected HEX1[ 1 ]
initial
begin
	HEX1_expected[1] = 1'bX;
	HEX1_expected[1] = #999000 1'b0;
end 
// expected HEX1[ 0 ]
initial
begin
	HEX1_expected[0] = 1'bX;
	HEX1_expected[0] = #999000 1'b0;
end 

// expected LEDG[6]
initial
begin
	LEDG_expected[6] = 1'bX;
	LEDG_expected[6] = #999000 1'b0;
end 

// expected LEDR[2]
initial
begin
	LEDR_expected[2] = 1'bX;
	LEDR_expected[2] = #999000 1'b0;
end 

// expected ctrl_state
initial
begin
	ctrl_state_expected = 1'bX;
	ctrl_state_expected = #999000 1'b0;
end 

// expected ctrl_load_counter
initial
begin
	ctrl_load_counter_expected = 1'bX;
	ctrl_load_counter_expected = #1999000 1'b0;
end 
// expected parity_7sd[ 6 ]
initial
begin
	parity_7sd_expected[6] = 1'bX;
	parity_7sd_expected[6] = #1999000 1'b0;
end 
// expected parity_7sd[ 5 ]
initial
begin
	parity_7sd_expected[5] = 1'bX;
	parity_7sd_expected[5] = #1999000 1'b0;
end 
// expected parity_7sd[ 4 ]
initial
begin
	parity_7sd_expected[4] = 1'bX;
	parity_7sd_expected[4] = #1999000 1'b0;
end 
// expected parity_7sd[ 3 ]
initial
begin
	parity_7sd_expected[3] = 1'bX;
	parity_7sd_expected[3] = #1999000 1'b0;
end 
// expected parity_7sd[ 2 ]
initial
begin
	parity_7sd_expected[2] = 1'bX;
	parity_7sd_expected[2] = #1999000 1'b0;
end 
// expected parity_7sd[ 1 ]
initial
begin
	parity_7sd_expected[1] = 1'bX;
	parity_7sd_expected[1] = #1999000 1'b0;
end 
// expected parity_7sd[ 0 ]
initial
begin
	parity_7sd_expected[0] = 1'bX;
	parity_7sd_expected[0] = #1999000 1'b0;
end 
// expected sr_parity[ 10 ]
initial
begin
	sr_parity_expected[10] = 1'bX;
	sr_parity_expected[10] = #1999000 1'b0;
end 
// expected sr_parity[ 9 ]
initial
begin
	sr_parity_expected[9] = 1'bX;
	sr_parity_expected[9] = #1999000 1'b0;
end 
// expected sr_parity[ 8 ]
initial
begin
	sr_parity_expected[8] = 1'bX;
	sr_parity_expected[8] = #1999000 1'b0;
end 
// expected sr_parity[ 7 ]
initial
begin
	sr_parity_expected[7] = 1'bX;
	sr_parity_expected[7] = #1999000 1'b0;
end 
// expected sr_parity[ 6 ]
initial
begin
	sr_parity_expected[6] = 1'bX;
	sr_parity_expected[6] = #1999000 1'b0;
end 
// expected sr_parity[ 5 ]
initial
begin
	sr_parity_expected[5] = 1'bX;
	sr_parity_expected[5] = #1999000 1'b0;
end 
// expected sr_parity[ 4 ]
initial
begin
	sr_parity_expected[4] = 1'bX;
	sr_parity_expected[4] = #1999000 1'b0;
end 
// expected sr_parity[ 3 ]
initial
begin
	sr_parity_expected[3] = 1'bX;
	sr_parity_expected[3] = #1999000 1'b0;
end 
// expected sr_parity[ 2 ]
initial
begin
	sr_parity_expected[2] = 1'bX;
	sr_parity_expected[2] = #1999000 1'b0;
end 
// expected sr_parity[ 1 ]
initial
begin
	sr_parity_expected[1] = 1'bX;
	sr_parity_expected[1] = #1999000 1'b0;
end 
// expected sr_parity[ 0 ]
initial
begin
	sr_parity_expected[0] = 1'bX;
	sr_parity_expected[0] = #1999000 1'b0;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or LEDG_expected or LEDG or LEDR_expected or LEDR or ctrl_load_counter_expected or ctrl_load_counter or ctrl_state_expected or ctrl_state or parity_7sd_expected or parity_7sd or sr_parity_expected or sr_parity)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected LEDG = %b | expected LEDR = %b | expected ctrl_load_counter = %b | expected ctrl_state = %b | expected parity_7sd = %b | expected sr_parity = %b | ",HEX0_expected_prev,HEX1_expected_prev,LEDG_expected_prev,LEDR_expected_prev,ctrl_load_counter_expected_prev,ctrl_state_expected_prev,parity_7sd_expected_prev,sr_parity_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real LEDG = %b | real LEDR = %b | real ctrl_load_counter = %b | real ctrl_state = %b | real parity_7sd = %b | real sr_parity = %b | ",HEX0_prev,HEX1_prev,LEDG_prev,LEDR_prev,ctrl_load_counter_prev,ctrl_state_prev,parity_7sd_prev,sr_parity_prev);
`endif
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( HEX1_expected_prev[0] !== 1'bx ) && ( HEX1_prev[0] !== HEX1_expected_prev[0] )
		&& ((HEX1_expected_prev[0] !== last_HEX1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[0] = HEX1_expected_prev[0];
	end
	if (
		( HEX1_expected_prev[1] !== 1'bx ) && ( HEX1_prev[1] !== HEX1_expected_prev[1] )
		&& ((HEX1_expected_prev[1] !== last_HEX1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[1] = HEX1_expected_prev[1];
	end
	if (
		( HEX1_expected_prev[2] !== 1'bx ) && ( HEX1_prev[2] !== HEX1_expected_prev[2] )
		&& ((HEX1_expected_prev[2] !== last_HEX1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[2] = HEX1_expected_prev[2];
	end
	if (
		( HEX1_expected_prev[3] !== 1'bx ) && ( HEX1_prev[3] !== HEX1_expected_prev[3] )
		&& ((HEX1_expected_prev[3] !== last_HEX1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[3] = HEX1_expected_prev[3];
	end
	if (
		( HEX1_expected_prev[4] !== 1'bx ) && ( HEX1_prev[4] !== HEX1_expected_prev[4] )
		&& ((HEX1_expected_prev[4] !== last_HEX1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[4] = HEX1_expected_prev[4];
	end
	if (
		( HEX1_expected_prev[5] !== 1'bx ) && ( HEX1_prev[5] !== HEX1_expected_prev[5] )
		&& ((HEX1_expected_prev[5] !== last_HEX1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[5] = HEX1_expected_prev[5];
	end
	if (
		( HEX1_expected_prev[6] !== 1'bx ) && ( HEX1_prev[6] !== HEX1_expected_prev[6] )
		&& ((HEX1_expected_prev[6] !== last_HEX1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[6] = HEX1_expected_prev[6];
	end
	if (
		( LEDG_expected_prev !== 1'bx ) && ( LEDG_prev !== LEDG_expected_prev )
		&& ((LEDG_expected_prev !== last_LEDG_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp = LEDG_expected_prev;
	end
	if (
		( LEDR_expected_prev !== 1'bx ) && ( LEDR_prev !== LEDR_expected_prev )
		&& ((LEDR_expected_prev !== last_LEDR_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LEDR_exp = LEDR_expected_prev;
	end
	if (
		( ctrl_load_counter_expected_prev !== 1'bx ) && ( ctrl_load_counter_prev !== ctrl_load_counter_expected_prev )
		&& ((ctrl_load_counter_expected_prev !== last_ctrl_load_counter_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_load_counter :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_load_counter_expected_prev);
		$display ("     Real value = %b", ctrl_load_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ctrl_load_counter_exp = ctrl_load_counter_expected_prev;
	end
	if (
		( ctrl_state_expected_prev !== 1'bx ) && ( ctrl_state_prev !== ctrl_state_expected_prev )
		&& ((ctrl_state_expected_prev !== last_ctrl_state_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_state :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_state_expected_prev);
		$display ("     Real value = %b", ctrl_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ctrl_state_exp = ctrl_state_expected_prev;
	end
	if (
		( parity_7sd_expected_prev[0] !== 1'bx ) && ( parity_7sd_prev[0] !== parity_7sd_expected_prev[0] )
		&& ((parity_7sd_expected_prev[0] !== last_parity_7sd_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_7sd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_7sd_expected_prev);
		$display ("     Real value = %b", parity_7sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_7sd_exp[0] = parity_7sd_expected_prev[0];
	end
	if (
		( parity_7sd_expected_prev[1] !== 1'bx ) && ( parity_7sd_prev[1] !== parity_7sd_expected_prev[1] )
		&& ((parity_7sd_expected_prev[1] !== last_parity_7sd_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_7sd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_7sd_expected_prev);
		$display ("     Real value = %b", parity_7sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_7sd_exp[1] = parity_7sd_expected_prev[1];
	end
	if (
		( parity_7sd_expected_prev[2] !== 1'bx ) && ( parity_7sd_prev[2] !== parity_7sd_expected_prev[2] )
		&& ((parity_7sd_expected_prev[2] !== last_parity_7sd_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_7sd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_7sd_expected_prev);
		$display ("     Real value = %b", parity_7sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_7sd_exp[2] = parity_7sd_expected_prev[2];
	end
	if (
		( parity_7sd_expected_prev[3] !== 1'bx ) && ( parity_7sd_prev[3] !== parity_7sd_expected_prev[3] )
		&& ((parity_7sd_expected_prev[3] !== last_parity_7sd_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_7sd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_7sd_expected_prev);
		$display ("     Real value = %b", parity_7sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_7sd_exp[3] = parity_7sd_expected_prev[3];
	end
	if (
		( parity_7sd_expected_prev[4] !== 1'bx ) && ( parity_7sd_prev[4] !== parity_7sd_expected_prev[4] )
		&& ((parity_7sd_expected_prev[4] !== last_parity_7sd_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_7sd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_7sd_expected_prev);
		$display ("     Real value = %b", parity_7sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_7sd_exp[4] = parity_7sd_expected_prev[4];
	end
	if (
		( parity_7sd_expected_prev[5] !== 1'bx ) && ( parity_7sd_prev[5] !== parity_7sd_expected_prev[5] )
		&& ((parity_7sd_expected_prev[5] !== last_parity_7sd_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_7sd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_7sd_expected_prev);
		$display ("     Real value = %b", parity_7sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_7sd_exp[5] = parity_7sd_expected_prev[5];
	end
	if (
		( parity_7sd_expected_prev[6] !== 1'bx ) && ( parity_7sd_prev[6] !== parity_7sd_expected_prev[6] )
		&& ((parity_7sd_expected_prev[6] !== last_parity_7sd_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port parity_7sd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", parity_7sd_expected_prev);
		$display ("     Real value = %b", parity_7sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_parity_7sd_exp[6] = parity_7sd_expected_prev[6];
	end
	if (
		( sr_parity_expected_prev[0] !== 1'bx ) && ( sr_parity_prev[0] !== sr_parity_expected_prev[0] )
		&& ((sr_parity_expected_prev[0] !== last_sr_parity_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[0] = sr_parity_expected_prev[0];
	end
	if (
		( sr_parity_expected_prev[1] !== 1'bx ) && ( sr_parity_prev[1] !== sr_parity_expected_prev[1] )
		&& ((sr_parity_expected_prev[1] !== last_sr_parity_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[1] = sr_parity_expected_prev[1];
	end
	if (
		( sr_parity_expected_prev[2] !== 1'bx ) && ( sr_parity_prev[2] !== sr_parity_expected_prev[2] )
		&& ((sr_parity_expected_prev[2] !== last_sr_parity_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[2] = sr_parity_expected_prev[2];
	end
	if (
		( sr_parity_expected_prev[3] !== 1'bx ) && ( sr_parity_prev[3] !== sr_parity_expected_prev[3] )
		&& ((sr_parity_expected_prev[3] !== last_sr_parity_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[3] = sr_parity_expected_prev[3];
	end
	if (
		( sr_parity_expected_prev[4] !== 1'bx ) && ( sr_parity_prev[4] !== sr_parity_expected_prev[4] )
		&& ((sr_parity_expected_prev[4] !== last_sr_parity_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[4] = sr_parity_expected_prev[4];
	end
	if (
		( sr_parity_expected_prev[5] !== 1'bx ) && ( sr_parity_prev[5] !== sr_parity_expected_prev[5] )
		&& ((sr_parity_expected_prev[5] !== last_sr_parity_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[5] = sr_parity_expected_prev[5];
	end
	if (
		( sr_parity_expected_prev[6] !== 1'bx ) && ( sr_parity_prev[6] !== sr_parity_expected_prev[6] )
		&& ((sr_parity_expected_prev[6] !== last_sr_parity_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[6] = sr_parity_expected_prev[6];
	end
	if (
		( sr_parity_expected_prev[7] !== 1'bx ) && ( sr_parity_prev[7] !== sr_parity_expected_prev[7] )
		&& ((sr_parity_expected_prev[7] !== last_sr_parity_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[7] = sr_parity_expected_prev[7];
	end
	if (
		( sr_parity_expected_prev[8] !== 1'bx ) && ( sr_parity_prev[8] !== sr_parity_expected_prev[8] )
		&& ((sr_parity_expected_prev[8] !== last_sr_parity_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[8] = sr_parity_expected_prev[8];
	end
	if (
		( sr_parity_expected_prev[9] !== 1'bx ) && ( sr_parity_prev[9] !== sr_parity_expected_prev[9] )
		&& ((sr_parity_expected_prev[9] !== last_sr_parity_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[9] = sr_parity_expected_prev[9];
	end
	if (
		( sr_parity_expected_prev[10] !== 1'bx ) && ( sr_parity_prev[10] !== sr_parity_expected_prev[10] )
		&& ((sr_parity_expected_prev[10] !== last_sr_parity_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sr_parity[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sr_parity_expected_prev);
		$display ("     Real value = %b", sr_parity_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sr_parity_exp[10] = sr_parity_expected_prev[10];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rx_uart_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [0:0] KEY;
reg [0:0] SW;
reg UART_RXD;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:6] LEDG;
wire [2:2] LEDR;
wire ctrl_load_counter;
wire ctrl_state;
wire [6:0] parity_7sd;
wire [10:0] sr_parity;

wire sampler;                             

// assign statements (if any)                          
rx_uart i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.KEY(KEY),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW),
	.UART_RXD(UART_RXD),
	.ctrl_load_counter(ctrl_load_counter),
	.ctrl_state(ctrl_state),
	.parity_7sd(parity_7sd),
	.sr_parity(sr_parity)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b1;
	KEY[0] = #2300000 1'b0;
	KEY[0] = #20000 1'b1;
end 

// UART_RXD
initial
begin
	UART_RXD = 1'b1;
	UART_RXD = #40000 1'b0;
	UART_RXD = #80000 1'b1;
	UART_RXD = #240000 1'b0;
	UART_RXD = #160000 1'b1;
	UART_RXD = #80000 1'b0;
	UART_RXD = #80000 1'b1;
	UART_RXD = #200000 1'b0;
	UART_RXD = #240000 1'b1;
	UART_RXD = #160000 1'b0;
	UART_RXD = #80000 1'b1;
	UART_RXD = #80000 1'b0;
	UART_RXD = #80000 1'b1;
	UART_RXD = #480000 1'b0;
	UART_RXD = #80000 1'b1;
	UART_RXD = #160000 1'b0;
	UART_RXD = #240000 1'b1;
	UART_RXD = #80000 1'b0;
	UART_RXD = #160000 1'b1;
	UART_RXD = #80000 1'b0;
end 

rx_uart_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.SW(SW),
	.UART_RXD(UART_RXD),
	.sampler_tx(sampler)
);

rx_uart_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.ctrl_load_counter(ctrl_load_counter),
	.ctrl_state(ctrl_state),
	.parity_7sd(parity_7sd),
	.sr_parity(sr_parity),
	.sampler_rx(sampler)
);
endmodule

