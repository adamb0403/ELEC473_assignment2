// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2023 15:45:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    tx_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tx_controller_vlg_sample_tst(
	clk,
	ctrl_baud,
	ctrl_counter,
	ctrl_pulser,
	reset,
	sampler_tx
);
input  clk;
input  ctrl_baud;
input  ctrl_counter;
input  ctrl_pulser;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or ctrl_baud or ctrl_counter or ctrl_pulser or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module tx_controller_vlg_check_tst (
	ctrl_sr_load,
	ctrl_sr_shift,
	current_state,
	sampler_rx
);
input  ctrl_sr_load;
input  ctrl_sr_shift;
input [1:0] current_state;
input sampler_rx;

reg  ctrl_sr_load_expected;
reg  ctrl_sr_shift_expected;
reg [1:0] current_state_expected;

reg  ctrl_sr_load_prev;
reg  ctrl_sr_shift_prev;
reg [1:0] current_state_prev;

reg  ctrl_sr_load_expected_prev;
reg  ctrl_sr_shift_expected_prev;
reg [1:0] current_state_expected_prev;

reg  last_ctrl_sr_load_exp;
reg  last_ctrl_sr_shift_exp;
reg [1:0] last_current_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	ctrl_sr_load_prev = ctrl_sr_load;
	ctrl_sr_shift_prev = ctrl_sr_shift;
	current_state_prev = current_state;
end

// update expected /o prevs

always @(trigger)
begin
	ctrl_sr_load_expected_prev = ctrl_sr_load_expected;
	ctrl_sr_shift_expected_prev = ctrl_sr_shift_expected;
	current_state_expected_prev = current_state_expected;
end



// expected ctrl_sr_load
initial
begin
	ctrl_sr_load_expected = 1'bX;
end 

// expected ctrl_sr_shift
initial
begin
	ctrl_sr_shift_expected = 1'bX;
end 
// expected current_state[ 1 ]
initial
begin
	current_state_expected[1] = 1'bX;
end 
// expected current_state[ 0 ]
initial
begin
	current_state_expected[0] = 1'bX;
end 
// generate trigger
always @(ctrl_sr_load_expected or ctrl_sr_load or ctrl_sr_shift_expected or ctrl_sr_shift or current_state_expected or current_state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ctrl_sr_load = %b | expected ctrl_sr_shift = %b | expected current_state = %b | ",ctrl_sr_load_expected_prev,ctrl_sr_shift_expected_prev,current_state_expected_prev);
	$display("| real ctrl_sr_load = %b | real ctrl_sr_shift = %b | real current_state = %b | ",ctrl_sr_load_prev,ctrl_sr_shift_prev,current_state_prev);
`endif
	if (
		( ctrl_sr_load_expected_prev !== 1'bx ) && ( ctrl_sr_load_prev !== ctrl_sr_load_expected_prev )
		&& ((ctrl_sr_load_expected_prev !== last_ctrl_sr_load_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_sr_load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_sr_load_expected_prev);
		$display ("     Real value = %b", ctrl_sr_load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ctrl_sr_load_exp = ctrl_sr_load_expected_prev;
	end
	if (
		( ctrl_sr_shift_expected_prev !== 1'bx ) && ( ctrl_sr_shift_prev !== ctrl_sr_shift_expected_prev )
		&& ((ctrl_sr_shift_expected_prev !== last_ctrl_sr_shift_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl_sr_shift :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_sr_shift_expected_prev);
		$display ("     Real value = %b", ctrl_sr_shift_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ctrl_sr_shift_exp = ctrl_sr_shift_expected_prev;
	end
	if (
		( current_state_expected_prev[0] !== 1'bx ) && ( current_state_prev[0] !== current_state_expected_prev[0] )
		&& ((current_state_expected_prev[0] !== last_current_state_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_state_expected_prev);
		$display ("     Real value = %b", current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_current_state_exp[0] = current_state_expected_prev[0];
	end
	if (
		( current_state_expected_prev[1] !== 1'bx ) && ( current_state_prev[1] !== current_state_expected_prev[1] )
		&& ((current_state_expected_prev[1] !== last_current_state_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_state_expected_prev);
		$display ("     Real value = %b", current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_current_state_exp[1] = current_state_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module tx_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ctrl_baud;
reg ctrl_counter;
reg ctrl_pulser;
reg reset;
// wires                                               
wire ctrl_sr_load;
wire ctrl_sr_shift;
wire [1:0] current_state;

wire sampler;                             

// assign statements (if any)                          
tx_controller i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.ctrl_baud(ctrl_baud),
	.ctrl_counter(ctrl_counter),
	.ctrl_pulser(ctrl_pulser),
	.ctrl_sr_load(ctrl_sr_load),
	.ctrl_sr_shift(ctrl_sr_shift),
	.current_state(current_state),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #140000 1'b0;
	reset = #20000 1'b1;
	reset = #660000 1'b0;
	reset = #20000 1'b1;
end 

// ctrl_pulser
initial
begin
	ctrl_pulser = 1'b0;
	ctrl_pulser = #20000 1'b1;
	ctrl_pulser = #10000 1'b0;
	ctrl_pulser = #550000 1'b1;
	ctrl_pulser = #10000 1'b0;
	ctrl_pulser = #230000 1'b1;
	ctrl_pulser = #10000 1'b0;
end 

// ctrl_baud
always
begin
	ctrl_baud = 1'b0;
	ctrl_baud = #20000 1'b1;
	#20000;
end 

// ctrl_counter
initial
begin
	ctrl_counter = 1'b0;
	ctrl_counter = #460000 1'b1;
	ctrl_counter = #20000 1'b0;
	ctrl_counter = #220000 1'b1;
	ctrl_counter = #20000 1'b0;
end 

tx_controller_vlg_sample_tst tb_sample (
	.clk(clk),
	.ctrl_baud(ctrl_baud),
	.ctrl_counter(ctrl_counter),
	.ctrl_pulser(ctrl_pulser),
	.reset(reset),
	.sampler_tx(sampler)
);

tx_controller_vlg_check_tst tb_out(
	.ctrl_sr_load(ctrl_sr_load),
	.ctrl_sr_shift(ctrl_sr_shift),
	.current_state(current_state),
	.sampler_rx(sampler)
);
endmodule

