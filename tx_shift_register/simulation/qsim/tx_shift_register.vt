// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2023 14:42:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    tx_shift_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tx_shift_register_vlg_sample_tst(
	clk,
	reset,
	tx_sr_in,
	tx_sr_load,
	tx_sr_shift,
	sampler_tx
);
input  clk;
input  reset;
input [10:0] tx_sr_in;
input  tx_sr_load;
input  tx_sr_shift;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or tx_sr_in or tx_sr_load or tx_sr_shift)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module tx_shift_register_vlg_check_tst (
	tx_sr_out,
	sampler_rx
);
input  tx_sr_out;
input sampler_rx;

reg  tx_sr_out_expected;

reg  tx_sr_out_prev;

reg  tx_sr_out_expected_prev;

reg  last_tx_sr_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	tx_sr_out_prev = tx_sr_out;
end

// update expected /o prevs

always @(trigger)
begin
	tx_sr_out_expected_prev = tx_sr_out_expected;
end



// expected tx_sr_out
initial
begin
	tx_sr_out_expected = 1'bX;
	tx_sr_out_expected = #999000 1'b0;
end 
// generate trigger
always @(tx_sr_out_expected or tx_sr_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected tx_sr_out = %b | ",tx_sr_out_expected_prev);
	$display("| real tx_sr_out = %b | ",tx_sr_out_prev);
`endif
	if (
		( tx_sr_out_expected_prev !== 1'bx ) && ( tx_sr_out_prev !== tx_sr_out_expected_prev )
		&& ((tx_sr_out_expected_prev !== last_tx_sr_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_sr_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_sr_out_expected_prev);
		$display ("     Real value = %b", tx_sr_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_tx_sr_out_exp = tx_sr_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module tx_shift_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [10:0] tx_sr_in;
reg tx_sr_load;
reg tx_sr_shift;
// wires                                               
wire tx_sr_out;

wire sampler;                             

// assign statements (if any)                          
tx_shift_register i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reset(reset),
	.tx_sr_in(tx_sr_in),
	.tx_sr_load(tx_sr_load),
	.tx_sr_out(tx_sr_out),
	.tx_sr_shift(tx_sr_shift)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #740000 1'b0;
	reset = #20000 1'b1;
end 

// tx_sr_load
initial
begin
	tx_sr_load = 1'b0;
	tx_sr_load = #20000 1'b1;
	tx_sr_load = #20000 1'b0;
	tx_sr_load = #440000 1'b1;
	tx_sr_load = #20000 1'b0;
end 

// tx_sr_shift
initial
begin
	tx_sr_shift = 1'b0;
	tx_sr_shift = #80000 1'b1;
	# 20000;
	repeat(4)
	begin
		tx_sr_shift = 1'b0;
		tx_sr_shift = #20000 1'b1;
		# 20000;
	end
	repeat(5)
	begin
		tx_sr_shift = 1'b0;
		tx_sr_shift = #20000 1'b1;
		# 20000;
	end
	tx_sr_shift = 1'b0;
	tx_sr_shift = #120000 1'b1;
	# 20000;
	repeat(11)
	begin
		tx_sr_shift = 1'b0;
		tx_sr_shift = #20000 1'b1;
		# 20000;
	end
	tx_sr_shift = 1'b0;
end 
// tx_sr_in[ 10 ]
initial
begin
	tx_sr_in[10] = 1'b1;
end 
// tx_sr_in[ 9 ]
initial
begin
	tx_sr_in[9] = 1'b0;
	tx_sr_in[9] = #460000 1'b1;
end 
// tx_sr_in[ 8 ]
initial
begin
	tx_sr_in[8] = 1'b1;
end 
// tx_sr_in[ 7 ]
initial
begin
	tx_sr_in[7] = 1'b1;
	tx_sr_in[7] = #460000 1'b0;
end 
// tx_sr_in[ 6 ]
initial
begin
	tx_sr_in[6] = 1'b0;
	tx_sr_in[6] = #460000 1'b1;
end 
// tx_sr_in[ 5 ]
initial
begin
	tx_sr_in[5] = 1'b1;
end 
// tx_sr_in[ 4 ]
initial
begin
	tx_sr_in[4] = 1'b0;
end 
// tx_sr_in[ 3 ]
initial
begin
	tx_sr_in[3] = 1'b1;
end 
// tx_sr_in[ 2 ]
initial
begin
	tx_sr_in[2] = 1'b0;
	tx_sr_in[2] = #460000 1'b1;
end 
// tx_sr_in[ 1 ]
initial
begin
	tx_sr_in[1] = 1'b0;
end 
// tx_sr_in[ 0 ]
initial
begin
	tx_sr_in[0] = 1'b1;
end 

tx_shift_register_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.tx_sr_in(tx_sr_in),
	.tx_sr_load(tx_sr_load),
	.tx_sr_shift(tx_sr_shift),
	.sampler_tx(sampler)
);

tx_shift_register_vlg_check_tst tb_out(
	.tx_sr_out(tx_sr_out),
	.sampler_rx(sampler)
);
endmodule

